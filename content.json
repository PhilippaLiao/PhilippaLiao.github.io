{"posts":[{"title":"Hello World -- 部落格建置中","text":"2024/06/08 部落格建立，初步調整2024/06/10 新增留言區功能2024/06/12 加入 Google Analytics2024/06/13 開啟 busuanzi 全站瀏覽數統計及章閱讀數統計功能2024/06/16 樣式調整1：網站背景、navbar","link":"/Hello-World/"},{"title":"與程式語言的距離──文科生跨域轉職全紀錄(上)","text":"– 前言大家好，我是Philippa。在33歲時，我成功地從零程式背景轉職成為一名軟體工程師。基於各種考量，我選擇參加資展國際（前身為資策會）的培訓班，為進入這個全新領域做準備。 在選擇培訓班之前，我花了不少時間在網上查找前輩的上課心得分享，其中有兩篇特別讓我深受啟發，於是我也立下目標，希望將自己的轉職歷程完整記錄下來，待結業後公開分享。於是便誕生了這篇文章，希望也能幫助到有類似需求的人。 考量篇幅較長，我將內容分為三部分，方便閱讀。第一篇從我的教育與工作背景說起，闡述我為何選擇轉職以及決定參加培訓班的原因；第二、三篇則依照課程的不同科目，記錄我的上課心得。 個人背景從小就是標準的文科生，一路讀到師大國文系，畢業後有幾年在準備國考。後來一方面是逐漸感到厭倦，讀書效率低落，另一方面突然遭遇家人意外過世，更加無心讀書，就決定放棄，畢竟不能一直虛耗時間。 在準備國考的那幾年，我曾經嘗試不同的工作型態，有時半工半讀，有時專職備考，或是全職工作之餘兼顧課業。試過網路平台的行政人員、電話客服人員、電子教材的審查員等工作。每次進入一間新公司時，我總想著若工作合適，或許可以乾脆就此在一般企業工作下去，但這些職場我都無法久待。 放棄國考後，幸運地找到一份符合我興趣與能力又很安穩的全職工作，然而這是一份按時計薪的工作，無法帶來升職加薪的機會，在入職之初我便知道這裡不能久待，只是因為找不到合適的發展方向，讓我心裡漸感疲倦，便這樣待了四年之久。 接觸程式的開端軟體工程師、程式語言，在我印象中是距離非常遙遠的詞彙，從未想過自己會與這些事物產生關聯。而我開始接觸程式，主要來自於兩個契機： 1. RPG Maker在朋友的提議下，我們一群人組成遊戲製作團隊，開始製作一個靈異解謎探險遊戲。我在這個團隊中最初擔任的是劇本編寫，後來轉去支援系統組，也就是負責操作RPG Maker這個軟體，將遊戲本體實際做出來。 系統組原本有一位成員曾經使用過RPG Maker，由於他工作繁忙，能投入的時間有限，我便從最簡單的工作開始邊做邊學，逐漸熟悉操作。到了遊戲的第二部（這是一個系列作，預計共四部），那位成員決定退出團隊，便剩下我獨挑大樑，我也開始試著研究腳本，調整程式碼以做出更美觀的介面。 話雖如此，操作RPG Maker並不算真正意義上的程式語言學習，修改腳本也只是照著網路上查到的教學一步步執行。不過，這段經驗讓我對變數與迴圈等基本概念有了一些理解。 2. 工程師朋友提議做遊戲的那位朋友，原本在遊戲公司擔任美術，後來因認為美術職位發展有限而決定轉職。他參加了政府補助的工程師就業培訓班（主要學習Java和Python），並在結訓後順利入職成為初階工程師。朋友入職的公司一開始是用 Java，後來主管認為用 C# 做網站是趨勢，朋友也就邊做邊學 C#，覺得是還蠻好上手的語言。至今他已經工作超過五年，對目前生活相當滿意。 眼見我職涯上的迷茫，他提議我也去學習程式語言，他可以幫忙我的學習。當時我下意識認為領域差距太大，不可能做到，但這個提議在我心中種下了轉職的種子。 試試看也無妨1. 網路資源自學2022年初，我對未來的憂慮漸漸浮現。這份領基本時薪的工作已經做兩年半了，差不多要開始另謀出路了吧？可是一想到要「找」工作，就覺得心好累…… 當時我依然對自己的職涯感到迷茫，恰好在圖書館展示區看到一本C#程式語言的自學書，腦中勾起朋友曾經的提議，便找出他當時分享的自學資源網址（某位網友寫的教學網誌），想說先試著學看看也無妨。 結果我才學沒多久就眼花撩亂，那篇文章主要講說變數、常數、型別與型別轉換，我只覺得怎麼突然一堆名詞砸到我臉上？ 我立刻意識到這樣不行，便在網路上搜尋其他自學教材，找到了YouTube上的「小山的C#教學」。小山老師自述這是為了教朋友而拍攝的影片（讓我頓生好感），每集時間不長，簡單介紹一個概念並安排小練習，難度適中，覺得很適合我！ 於是我在年假期間跟著影片學習，年假結束時就看到第26課了，開工以後學習進度變得遲緩，最終只學到第31課。然而對我來說小山影片幫助很大，他讓我真正開始寫下第一行程式碼，讓我感受到學程式語言並不那麼困難。 2. 台大資訊系統訓練班同樣在2022年初，我正在看小山影片學習的時期，在捷運站內看到台大資訊系統訓練班的海報，課程包括C#程式基礎班。一查之下發現價格僅五千元，心想先靠影片自學，之後有需要可以報名。 幾個月後，我開始認真思考轉職工程師的可能性，於是報名台大的C#程式基礎班，希望能藉此檢驗自己是否適合學程式，更重要的是，我究竟有沒有興趣。 考量到交通問題，我選擇線上課程，也就是實體課程的「錄影版」，課程期間大約兩個月，共計30小時。只要在課程期間觀看影片，並上傳五份作業，以作業分數來計算成績。 這個課程說難不難，說簡單也不簡單。值得肯定的是內容包含許多C# 的基礎知識，還有教到演算法（反而在資展國際沒有教）和物件導向，但可能對於純新手來說還是稍微太難。 課堂上不時以數學題來作範例，對於很久沒接觸數學的人來說會有點迷茫，因為要先理解數學題的意思，才有辦法寫程式來解啊！此外也許是課程是錄影檔的關係，超級有隔閡感，送交出去的作業也沒有回饋，搞不懂到底是寫得好還是不好。 我自覺學習成效沒有很好……很多概念似懂非懂，聽講感覺聽得很順，但寫作業時往往要花很長時間，最後一份作業甚至自己寫不出來，只能先理解老師的解法，再進行調整。 日後回想，最大的問題在於我自己。當時的我不知道，學習程式語言不是用聽就可以懂，非常仰賴學習者自己動手寫code，即使是照著打一次也沒關係。我應該把老師上課演示的範例題也自己寫過一次才能真正理解。 3. 看書自學最終我仍是順利結業，儘管學習過程稍有挫折，大致來說還算覺得有趣，至少在成功寫出作業的時候頗有成就感的。經此一遭，我覺得自己對程式領域有興趣，但對資質仍缺乏信心。於是在課程結束後一個月左右，我就買了自學書，打算先將自學書學完。不過直到2023年初我才真正開始學習。 挑選自學書時，我參考了網路建議，也實地到圖書館或書店翻閱，確認哪一本比較適合自己，最後選擇《C#程式設計入門與實務：百分百自學手冊》（彭建文著，VS2019版）。 這個時期正好ChatGPT大流行，它真的是個很棒的幫手，書上有些未說清的概念可以問它，遇到Bug或完成練習題後，都可以向它尋求改進建議，不禁感嘆自己真是幸運，選在這個時期學習程式。 我扎實地照著書上的步驟跟著寫一遍範例題，完成每道練習題。整體而言題目不難，但有時題意難以判讀，特別是介面設計部分常需揣摩良久。陣列這一章對我來說稍顯困難，花費特別多時間和腦力在寫練習題上。 自學的進度仰靠自我規範的能力，最終只來得及學完基礎篇（也就是沒有進入到物件導向的部分）。 小山的影片幫助我入門，台大資訊系統班讓我體驗到正統程式語言學習的樣態，直到透過自學書學習，我才感受到自己真正學到東西。如前面所提，寫程式真的非常仰賴親自動手做，當真正理解後才有辦法舉一反三。 培訓班的選擇原本預計完整自學完這本書，再考慮是否繼續。結果到了四月，由於一個契機，我對轉職的決心突然大增，決定今年一定要辭職去報名就業培訓班。 我開始找尋各種教學機構，包括緯育、資展國際、X School和Build School。 X School的優勢在於無需辭職，可以業餘學習，但我對線上課程的形式有點擔心，怕學習效果不好，而且沒有就業媒合，學費也只便宜一點，最後便排除它。 Build School我忘記淘汰它的原因，呃，好像其中一個理由是課程資訊的網頁排版不太好閱讀，給人一種不太專業的感覺，加上評價少，讓人難以判斷。 最後我鎖定緯育和資展國際兩家，資展國際的前身是資策會，扛著四十年的老招牌，權威性自不用多說；緯育的前身則是中壢資策會，雖然同為「資策會」，但感覺上稍顯資淺，且緯育的Java班似乎較受推崇，但是緯育整體顯得年輕有活力，感覺上課氣氛會比較輕鬆。 我預計十月離職，還有好幾個月的時間可以決定要報名哪一家。有將近五個月的時間都在這兩家之間反覆拉鋸，參加了四次說明會——緯育（線上）、資展國際（現場）、資展國際（現場）、緯育（聯合說明會，現場），也就課程大綱詢問工程師朋友的意見。 最終我選擇的是資展國際，必須要說這兩家實在是不分上下，是基於一些很細小又不理性的理由而讓我選資展，就像擲硬幣班是由機率決定。 後來開始上課後，還是蠻慶幸選擇資展，因為有專屬電腦和固定座位實在很方便！而緯育的方式則是配發筆電，想到每天都要攜帶筆電，就覺得有些麻煩（懶惰鬼）。","link":"/%E8%88%87%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80%E7%9A%84%E8%B7%9D%E9%9B%A2%E2%94%80%E2%94%80%E6%96%87%E7%A7%91%E7%94%9F%E8%B7%A8%E5%9F%9F%E8%BD%89%E8%81%B7%E5%85%A8%E7%B4%80%E9%8C%84-%E4%B8%8A/"},{"title":"與程式語言的距離──文科生跨域轉職全紀錄(下)","text":"– 專業科目08_HTML&amp;CSS（老師D） 以期中專題為分界，從這門課開始學習網頁程式相關的內容。 大體來說，學習 HTML 和 CSS 讓人還蠻有成就感的，沒什麼難懂的程式邏輯，就像是用程式碼在畫畫一樣，加個標籤、改個屬性值，畫面就會改變。 某方面來說也令我覺得很像在學英文單字，HTML 作為一個標記語言，有非常多標籤要記，重點是為了節省字數，都是取簡稱，一時之間很難記憶。我是採用較笨的做法，認真整理筆記，把每個標籤的原文都整理成表格，例如 &lt;tr&gt; 意思是 table row，透過這樣的方式來記憶。 班上似乎有一部分的人認為 CSS 很無聊，或者對於刻版面極度沒興趣，隱約聽到有人在 murmur 「之後做專題都是用 Bootstrap 套版，學 CSS 沒用吧～」。當時我不知道什麼是 Bootstrap，只是單純認定既然我都花這麼多學費，每堂課就都要認真上的精神，並沒有輕忽它。 就我這種完完全全沒接觸過前端的人來說，我認為 CSS 還是要認真學。確實在期末專題我們是套用 Bootstrap 沒錯，可是如果沒有前面的 CSS 基礎，我應該也很難上手。 專業科目09_JavaScript（老師E） 這門課可以榮登我在培訓班中最難以理解的課，實在大大出乎我的預料，說好的 JS 很簡單呢！！就同學們的反饋，讓我知道老師的教法恐怕是最大的因素，我就不多說什麼了。 在期末專題中會大量使用到 JS，甚至比 C# 還多，理論上來說是個投資報酬率高的課程，應該要好好學。而且聽說 JS 近年來發展的範圍越來越廣，學了不吃虧！ 回想起來，我發現這類「程式語言」的課程往往讓學生較難掌握。就以這個培訓班來說，C# 和 JS 這兩門課都讓人感到困惑。對於 C# 課程，由於我在上課前已有基礎，倒還應付得來；JS 課程則感到很無所適從。 我覺得其中的原因在於實作的缺乏。像 C# 和 JS 這樣的程式語言，通常在課程中僅教授概念和邏輯，練習題大多設計得像解數學題一樣，解題的過程雖讓人有種「理解了」的錯覺，但實際應用時卻發現依然不會用。 例如，C# 直到後來的元件開發課，才開始實作如何操控 WinForm；而在 JS 課程中，對於像我這樣對網頁應用完全沒概念的學員來說，很難想像 JS 如何在網頁程式中應用，因此在學習過程中相當迷茫。直到後來上了一門 Ajax 的課，才比較有概念。 此外，還有一個不容忽視的影響因素就是開發工具的轉變，在這門課我第一次接觸到 VS Code，儘管老師清楚說明每個套件分別是什麼作用，還是讓人霧煞煞，很不能適應，大概是太習慣強大又方便的 Visual Studio 了。後來在 Angular 課也是使用 VS Code，到那時就有比較適應。 由於學得不好，在期末專題時大量仰賴 chatGPT，而它傾向於教導使用者使用 jQuery。我只能說，至少還是有成功將期末專題負責的部分做出來，只是程式碼很醜，讓人頗為心虛。 專業科目10_GIT（導師） 期中專題時小組專案是靠著傻瓜合併法，像是接力般讓檔案在組員間傳遞，用雲端來作版本控制；到了期末專題就要使用 GitHub 作為版控工具。導師會從 Git 開始教起，理解基礎概念後才會教怎麼用 VS 和 GitHub 進行版本控制，以及如何解衝突，不過這部分就教得很簡略，導師表示可能發生的狀況太多太多了，沒辦法作教學，等發生問題再說。 學會使用後，真心覺得太方便了！好希望別的軟體也有這種功能喔！ 補充：還好培訓班有讓我們學這項技能，太實用了！在培訓班時我主要用到推分支，合併版本和解衝突都是其他組員負責。雖然我沒有深入使用，但至少有接觸過，這在公司工作時幫了大忙，否則我會擔心搞亂版控。個人認為即使培訓班沒教，也最好能夠自學的技能。 專業科目11_ASP .NET Core MVC（老師F） 最重量級的課程，表定上課時數為 42 小時。事前就知道這是最難也最重要的一門課，嚴陣以待，實際上沒有想像中那麼可怕，但確實是不容易學。 MVC 是一種網頁程式的開發模式，很難說明到底是在學什麼，就是……持續進行認識。我覺得像是在一個大宅邸，這門課的老師就像是長年在這間宅邸服侍的老管家，對於任何細節都瞭若指掌，而我們這群學生是初來乍到的小僕人。 宅邸裡有很多房間，有很多東西。你要東記記、西記記，要知道這個東西是什麼用途，有時還要知道它的上一代是什麼，新品舊物的差異是什麼。 想要達成某件事，你得知道分別要去哪幾個房間拿東西、放東西；要知道在這個房間做設定，會影響到的是那個房間的什麼東西。同時，宅邸還有很多供應商可以呼叫來支援，你還得認識這些商人，知道要怎麼把他們找來，要放在哪個位置。 結論：當小僕人好累。 補充：我現在的公司用的是 ASP.NET，因為程式系統實在太龐大了，我覺得學過 MVC 之後，對理解整個系統有幫助。雖然裡面的子程式很多，但還是比不上 MVC 那種分離的複雜度。 專業科目12_AJAX &amp; RESTfulAPI（老師G） Ajax 是一種運用數個技術來達到非同步處理的技巧，最直觀可見的差異是「畫面不會刷新」，例如在搜尋引擎輸入文字，下方會出現一個清單提示有哪些常被搜尋的字詞，這便是運用到 Ajax，讓畫面只有局部發生變化，並且不影響使用者繼續輸入文字。 基本上期末專題會用到大量的 Ajax，否則網頁使用的體感實在太差了。這門課並不太難，建議要好好學，許多課堂練習期末專題就會用到，相當實用的課。 可能是因為這個培訓班主要以 MVC 為核心， RESTful API 相對不被重視，老師只花了一堂課（3 小時）來教這部分。雖然期末專題有用到 RESTful API 的概念，但並沒有真正寫出獨立的 WebAPI，讓我對這部分的理解有些一知半解。 在業界，有不少公司採用前後端分離的開發模式。如果想要應徵後端工程師，面試時會對 WebAPI 有一定程度的重視，幾乎都會被問到。每次被問到這個問題時，我總會感到有點尷尬。 專業科目13_PowerBI（老師H） PowerBI 應該是最簡單的一門課，操作介面和 PPT、Excel 等 Microsoft Office 應用程式類似，只要匯入資料，選擇圖表類型，設定設定，就能變出美觀的圖表，相當方便。 老師會提供帳號給各組，可以使用 PowerBI 來製作圖表嵌入專題中，我原本是有打算用在 Web 後台，但後來來不及做就放棄了。 MVC小專題 上完 PowerBI 課後正好遇上春節假期，導師在 MVC 課結束時就有先宣布，年假期間要用 MVC 製作專題後台，簡單來說就是把之前 Winform 版翻修成 Web 版。這個作業並沒有要求完成度，主要目的是希望同學們不要放個假就忘記 MVC。有鑑於期中專題的慘痛回憶，我決定要在年假期間仔細觀察自己的開發速度，以作為期末專題時的事前規劃參考。 原本以為和期中專題相同的概念，只是改個寫法而已，應該不至於太難，沒想到超級受挫！對前端不熟，連偵錯都手忙腳亂，常常找不出問題在哪，已經被搞到看到 404 就想暴怒的程度；花在畫面排版的時間也相當多，課程安排中沒有正式學習 Bootstrap，只有 Ajax 課時老師有教一點點，所以花費不少時間在研究要怎麼用 Bootstrap 排出我想要的版面。 九天的假期共花了 55 小時左右，平均每天 6 小時，我個人覺得應該沒有其他同學能比得上。但這同時也讓我感到氣餒，花了這麼多時間，成果竟然只有這麼一點點。然而我事後無比感謝認真做這份作業的自己，若沒有這幾天的練習，就變成要在期末專題時才會經歷這種混亂與氣餒，而面臨極大的壓力。 專業科目14_Angular（老師I） Angular 是現在盛行的三大前端框架之一，有傳聞說它是最難的一個，不過這好像沒有定論，據說是較常用在大型專案。導師表示不要求大家要使用 Angular 來開發，不過建議可以有一兩個頁面是使用 Angular。就結果來看，似乎只有兩三個同學有做。 我必須坦承 Angular 課沒有學得很好，因為這時已經開始在煩惱期末專題，上課有點無法專心。不過 Angular 並沒有我最初想像得那麼難，多少可以感受到前後端分離的好處，只是它和 MVC 真的是完全不同的模式，當我在被 MVC 搞得一個頭兩個大時，實在很難再多花心力另外空出一部分的腦去做 Angular。 實際上我也沒有要走前端工程師的路，我最終沒有使用 Anglar，最大的缺憾是因此沒有去寫獨立的 WebAPI，倒與 Angular 本身無關。 專業科目15_Azure AI Service（老師F） 這是最後一門專業課程，是相對輕鬆的一門課。 簡單來說就是學習如何去使用 Microsoft Azure 提供的一些服務，老師挑選其中幾個讓我們做練習。我個人最想學的是文字分析、語言理解的部分，想要使用 AI 服務來實現履歷與職缺資料的相似性比對，可惜老師沒教到。 最終期末專題我還是有自行研究，使用文字分析中的關鍵字提取功能。要「使用」是非常的簡單，但效果並不好就是了。有很多想做的效果都必須進行模型訓練，這對我來說太耗心力，就簡單地使用關鍵字提取而已。 期末專題 第18周是最後一個有排專業科目的星期，第19周幾乎是空堂，第20-23周是正式的「期末專題課」。最後一周是安排來練習上台發表以及預演，實際上只有三週的時間就要完成專題，中間還要抽空準備履歷、小組專題介紹等等文件，時間相當緊迫。 以我們小組來說，第18周開始決定小組共用的網頁版型，在第19周時將專案切好分版、切好區域，讓大家在第20周就能分工各自去寫。 基於期中專題的陰影以及年假時的狀況觀察，我體認到自己的開發速度並不快，為了解決 Bug 常常需要耗很多時間，而我無法預料到底會遭遇到多少 Bug，於是煩惱一陣子後，決定更動我的構想，把工作媒合的功能集中在學生角度，企業角度就全數割捨掉，應徵流程改成用 Email 寄信。 我以導師的進度安排為基準，來規劃我自己個人的開發時程，並且盡量不安排週末的進度。我的想法是「當成在上班」，「上班時間」認真寫專題，「下班時間」就不要碰程式，讓自己好好休息。而我的「上班時間」是周一到週五，朝九晚九。 實際上周末我還是會寫一點程式，尤其是相對比較不重要的部分，像是履歷匯出成PDF的版面，就是我用周末時間排出來的，美觀程度比數字求職平台還要好，相當讓我得意（但這跟後端工程師能力無關，加不了什麼分數）。 期末專題期間，儘管也是有一些艱難的時刻，但大體來說是處於相當有餘裕的狀態，沒有過分逼迫自己。我在第22周時就只調小細節和做測試而已，對專題已經沒什麼擔憂，轉而對即將到來的結業與面試感到憂慮。 專題發表會與就業媒合 在培訓班的最後一週，我們主要用來進行專題發表會的練習。由於班上人數眾多，每個人的發言時間大約只有 4 分鐘，非常短暫。只要有認真做期末專題，隨便講都能超過 4 分鐘，因此大多數人的問題都是如何刪減講稿以符合時限。 由此可見，專題發表會既重要又不重要。這 4 分鐘的時間其實很難全面展現自己的能力。我個人認為，比起能力的展示，能否好好表達並展現自信更為關鍵。對於能力的展現，面試時才是重點。 專題發表會在上午舉行，中午吃過飯後，下午便是就業媒合會。導師會一直催促大家去和廠商談談，我勉強去了三家，同學們也會彼此交換情報。有的廠商很認真在進行面試，有的則像是來介紹公司，也沒問我什麼問題，甚至直接說有興趣請透過求職平台來投履歷。 以我的個人經驗來看，參加媒合會的廠商比我後來自行去找的公司要親切得多，而且他們對我的作品（期末專題）也更為重視。在我離開培訓班後，共面試了六家公司，只有一家會詢問我專題的相關細節。因此，我的感想是，專題本身未必是最重要的，反而是在開發專題過程中所學到的硬實力和軟實力，才是最關鍵的。面試官未必會深究專題的細節，但如果沒有製作專題的經驗，在回答問題時，所依據的底蘊就會顯得不足。 結語經過為期五個月的培訓班和一個月的求職過程，我已順利在現在的公司待滿半年，這份工作比我預期的還要適合我。前三個月，由於經驗不足，我常常感到緊張和焦慮，壓力也因此變得很大。不過，現在我的心情已經穩定了許多。 在這系列文章的開頭，我提到過有兩篇前人的心得對我幫助極大，一篇是透過培訓班轉職成功的案例，它讓我獲得激勵；另一篇則是失敗的案例，它讓我提前知曉可能會遇到那些困難。我很感謝他們願意分享出自己的經歷。 對於轉職這件事，究竟是依賴自學還是參加專業培訓班，這個問題一直以來都受到廣泛討論，但最終答案真的因人而異。對我而言，參加規劃好的課程更為合適，即使有些課程的安排和老師的授課方式並不那麼令人滿意。 無論如何，希望這系列文章能對那些正在猶豫是否要透過培訓班轉職，或者已經決定參加培訓班並想提前了解上課樣態的人，提供一些參考價值。","link":"/%E8%88%87%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80%E7%9A%84%E8%B7%9D%E9%9B%A2%E2%94%80%E2%94%80%E6%96%87%E7%A7%91%E7%94%9F%E8%B7%A8%E5%9F%9F%E8%BD%89%E8%81%B7%E5%85%A8%E7%B4%80%E9%8C%84-%E4%B8%8B/"},{"title":"與程式語言的距離──文科生跨域轉職全紀錄(中)","text":"– 開始上課我參加的是資展國際的「智慧應用微軟C#工程師就業養成班」，課程時數共528小時，屬於「產業新尖兵補助計畫」補助班。班上大多數學員都是接受補助的29歲以下青年，自費生約佔四分之一，這比我原本預期的還多，有些意外。 查找培訓班資料時，我參考一些過去學員的心得，早早就決定進入培訓班後要每天過朝九晚九的生活——除了上課還要晚自習到九點。第一週主要適應環境和新生活，從第二週開始，除了少數日子外我幾乎都留下晚自習；相對地，我回家後基本不再碰程式碼——事實上，回家已超過10點，洗澡後時間也不多了。 晚自習時，我大多整理筆記、讀課本、做作業和自主練習，期中專題開始後，也忙於相關作業。週五晚間不開自習教室，通常就當作放鬆日；而週末會用半天到一天的時間練習程式。 事前原本有點擔心自己對資訊相關的常識太過缺乏，會影響到理解能力，後來發現不愧是專門給零基礎學生的培訓班，老師的授課避免提到陌生專業名詞，甚至用「這觀念就和XXX一樣」這種要是根本不認識XXX就不懂的講解法；如果有提到，老師都會簡單說明，說明深度則視與課程內容的相關性而定。 上課教材以老師自編的講義為主，課本則更像參考書，需要時可以自己翻閱。由於書都很厚，我會斟酌閱讀，原則上只要新課程開始，就會放下上一門未讀完的教材，全心專注在新課程上。 專業科目01_C#入門（老師A） C#的基本概念，包括變數、迴圈、條件式、陣列、集合、自訂函數……等。 我認為應該要包含控制項的操作，但這位老師幾乎沒有讓我們碰控制項，只有用到Label、Button和TextBox而已，甚至已經幫我們放好在上面。 這位老師的教學方式是在專案中寫大量註解，註解的內容大多是指示，指示學生要觀察哪裡、做怎樣的練習。也就是說，我們的實作練習大多很片段，寫一小段程式碼，成功達到指定的效果即可。 總之，由於我先前自學的範圍幾乎等同於這門課教授的內容，老師的講解方式也沒有讓我有更深的理解（甚至有些還蠻莫名其妙），所以這門課我相當輕鬆與不專心，常常邊上課邊問chatGPT來補充額外內容。 專業科目02_SQL語法與SQL Server（老師B） SQL Server 介紹、SQL 介紹，以及基本的 SQL 語法。 課堂上會安排幾題小題目，講解一段、練習一題。課程有明確架構，很能知道自己現在在學什麼，感覺老師教學已經熟到可以記得北風資料庫（SQL Server 的 Northwind 範例資料庫）的資料了，很能控制要講哪些內容，而且毫不戀棧，也沒想補充多點內容，提前一小時就把這門課結束了。 過去只有碰過 C# 和 Visual Studio，很不適應 SQL 語法和 SSMS；課堂上雖然跟得上進度，卻也能明顯意識到，要是額外做題目肯定會頭昏眼花，簡言之就是還無法應用，例如子查詢和CTE；有些概念不完全懂，像是 GROUP BY 不知為何花了許久才搞懂，Transaction 乍聽是不難，也就糊裡糊塗的過去了。 後來學了 LINQ 後，就不太用到 SQL 語法，記憶便散失大半，然而業界很看重 SQL，強烈建議找工作前要去 LeetCode 上做做 SQL 50，作為複習用很適合。 補充：實際開始工作後，發現 SQL 真的是無敵重要，以我目前工作的狀況來說，常常需要查詢資料庫裡的資料，不需要用到多複雜的語法，但基本上每天都會需要用到 SQL。 專業科目03_資料庫實作（老師B） 正式學習 SQL Sever，著重在 SQL Sever 內含的各種概念、SSMS 圖形化界面的操作，與資料庫設計方式。 課程一開始我學得手忙腳亂，勉強跟得上老師的速度進行動作，腦袋卻來不及跟上，感覺跳來跳去的建立不起來一個知識架構（事實上無架構可言）。後續專題只需要做資料庫設計就好，很多上課學到的內容並不會實際用到，像是預存程序和Trigger之類的，現在已經不知道那是啥了。大體來說這門課最重要的就是資料庫設計。 這門課有安排一個作業是設計一個至少包含六張資料表的資料庫，老師會在上課時一一檢討。這個作業相當實用，經過老師的檢討，無形中學習或複習到許多關於資料庫的設計邏輯。 不過呢，由於老師在教學中會特別強調「資料庫正規化」，導致後來專題的資料庫設計上，我有點「過度正規化」導致資料表太多，後續才刪減到剩一半的量。 實際上我們這些新手去工作，公司也不會讓我們設計資料庫，所以這部分我覺得就是能好好設計好專題使用的資料庫、了解自己為何要這麼設計就夠了。 補充：我工作的公司資料庫非常非常龐大，事實上經過半年我還沒摸熟，也不甚清楚資料表之間的關聯，但最起碼要會看單張表的 primary key 和資料型別。另外，我曾經遇過一個查詢過於緩慢的問題，前輩提到關於叢集索引和非叢集索引的概念，我想這些知識還是頗為重要。 專業科目04_C#元件開發（老師C） 一言以蔽之，就是學習物件導向。 這門課的上課步調不快，老師授課方式相當容易讓學生跟上，概念說明簡單扼要，還會留時間讓學生拍照和做筆記；開放練習的時間頗長，會等到三分之二以上的同學都完成才會進下一步。 大致來說，因為有老師帶著做，對於物件導向、工廠模式、MVVM 會有一定的認識，要自己從無中生有就比較困難了。實際上在製作專題的過程因為太忙亂，未必有心力用物件導向的寫法，可以說這門課是屬於日後到業界才需要用到。 這門課有個很重要的功用是終於能體驗怎麼做出一個程式，先前在 C# 課以學習程式語言為主，到這門課才開始邊寫邊學控制項該怎麼用。我在自學時期已經接觸不少，對我來說還好，但我想完全零基礎的新手學到這裡才終於感受到寫程式是怎麼一回事吧！ 專業科目05_ADO.NET（老師C） 程式和資料庫溝通的方式之一。 這門課終於解開我的迷惑，SQL 和 C# 差這麼多，到底要怎麼結合在一起？我原本還以為 ADO.NET 是另一套語言呢。 老師教得不錯，要理解並不難，比較不習慣的是要在 VS 內寫 SQL 語法，有錯誤難以看出來，如果先前 SQL 沒學好，可能會加倍痛苦。 由於後續會再學 LINQ 及 Entity Framework，有許多同學（包括我）期中專題就沒用 ADO.NET，自然是忘掉了大部分。實際上業界還是有不少在使用 ADO.NET，以及前面說過普遍會重視 SQL 語法的熟悉度，就這方面考量，或許期中專題用 ADO.NET 來寫有助於通過面試？ 補充：我工作的公司是使用 ADO.NET，但和課堂上所學到的基礎用法不一樣，是將資料庫連線與查詢的功能封裝在一個 Class 裡，內含連線設定、查詢操作等多個 Function。因此，在不同程式中只需要創建該 Class 的物件，然後呼叫相應的方法，即可完成所需的資料庫操作，無需每次都重複撰寫連線設定與查詢細節。 專業科目06_LINQ 與 Entity Framework（老師C） LINQ 是一種簡便的查資料語法，Entity Framework 是一種框架，用來把資料庫映射到程式裡，就可以像操作物件一樣來操作資料庫，是另一種程式和資料庫溝通的方式。簡單來說，會覺得自己一直在用 C#，沒有出現 SQL 語法。 這門課就將上一門課寫的專案，改成用 Entity Framework 和 LINQ 的方式來寫，除了語法不同之外，概念並不難，但由於課堂上只學很簡單的資料操作，專題製作會根據你所設計的資料庫複雜程度而有不同的狀況發生，Entity Framework 本身也常出現各種稀奇古怪而難解的錯誤，課堂上根本沒遇到。 遇到錯誤時是連錯誤訊息也看不懂在寫啥、問題究竟出在哪，更糟的是牽涉到資料庫設計以及程式的設計，很難把問題具體告訴 chatGPT，直接給它錯誤訊息，它也只能概括列出有哪些可能造成此問題的因素，就靠著這些線索努力找尋問題源頭，期中專題時吃了不少苦頭。 總而言之，這門課就是學基礎，其餘就是從錯中學。遇到錯誤→找出問題→記下來，如此循環幾次，一些常發生的錯誤就自然記得是哪裡出問題，或者建立起一些概念，大致可以猜到哪裡出現問題，漸漸地就會與它越來越熟了。 對了，強力提醒，所有資料表──不管是多小的資料表或是中間表格，絕對都要設主鍵，不然透過 Entity Framework 就會發生你根本看不出問題出在哪的錯誤。 專業科目07_MAUI（老師C） 跨平台應用程式 UI，簡單來說就是可以用同樣的程式碼，在電腦與手機上運行，包括Windows、Mac、Android、iOS等。課堂上以 Android 手機 APP 為主。 這門課有點小尷尬，也很難實際用在專題上，不過在這門課接觸到 XMAL 和 XML 的概念，對於之後學 HTML 有點幫助（我覺得）；課程中有用到 MVVM 的開發架構，對於之後學 MVC 也有些幫助。另外，即使很陽春，看到寫的程式在手機上運行，是蠻讓人興奮的，算是學起來頗開心的課吧。 期中專題 接著說說專題，專題以小組進行，一組 7-8 人。大概培訓開始四週後導師就公布分組名單，第四週會用一堂課來介紹專案開發的流程與一些知識（例如什麼是 site map），然後導師會一組一組分別面談。從主題發想→決定主題→畫出 site map→確定所有子功能以及各自負責人→資料庫設計，導師會安排進度，大致上是每星期會和各組討論一次，共三次左右（如果小組有遇到問題，可以額外和老師約時間）。 在這個階段決定的小組專題主題、分配到哪個子功能，就會一路延用到期末專題。像我們這組做的是學生服務系統，我負責的子功能是工作媒合，所以只要是工作媒合有關的部分，前端後端、前台後台都會是由我負責。 大致來說，期中專題是用 winform 來製作「後台」，期末專題則是用 web 網頁來呈現「前台」。話雖如此，web 版的後台一樣也必須要做，只是會根據每個人負責的功能而有不同的比重，有些功能可能絕大多數都必須在後台呈現，所以他會花較多時間做後台；像我負責的工作媒合前後台都有，但我把心力都放在做前台，後台就很陽春了。 在第八週的時候，多數人會開始在課餘時間製作期中專題，正式的「期中專題製作課」是排在第九週，這個星期就是專心做期中專題，然後會以組別為單位進行發表（每個人都要上台講話）。 【學到的事情】 期中專題的製作時間真的很少，Bug 卻不斷出現，想做的效果出不來，可以說是整個培訓期中我最有壓力的幾天。也因為太痛苦了，讓我下定決心期末專題時要好好做事前規劃。 我深深體悟到，寫程式這件事不是光付出時間就能有高產能，常常是花太多時間反而會造成阻礙，例如嘗試了數小時就是無法解開的問題，隔天早上莫名三兩下就解決了，這樣的案例不只一次。當疲累時思考容易停滯，犯錯的機會也會上升。另外，我也發現自己沒有想像中那麼「耐操」，大約拼命努力三天左右，身體就開始有揮之不去的疲累感，剩下幾天就沒辦法保持精神了。 總而言之，做好時程管控以及適當的休息是非常重要的事，事前規劃好哪些是重要必做、哪些是次要，這會對做出取捨有幫助，時間有限，不要高估自己的效率，在經驗不足的狀況下做出的估算完全不準確。 我認為期中專題的重點反倒不是在程式上，而是在學習如何開發專案，包含評估自己的能力、速度以及小組內的磨合。因為有期中專題的經驗，才讓我能在期末專題時有餘裕的完成進度；也因為有經過磨合，我們小組才能真正上軌道，在期末專題時發揮良好的合作。 至於程式方面，就盡量做，不需太苛求自己要做到多棒多完美，坦白說這個 winform 專題投資報酬率不高，除非原本就對它很熟，能夠在短時間內做出很棒的成果，不然大多數人都做得零零落落，我未來在面試時也沒臉把它拿出來。老師會建議大家要花時間整理、優化它，然而現實的狀況是期中專題後就開始新的課程，根本沒時間再回頭。","link":"/%E8%88%87%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80%E7%9A%84%E8%B7%9D%E9%9B%A2%E2%94%80%E2%94%80%E6%96%87%E7%A7%91%E7%94%9F%E8%B7%A8%E5%9F%9F%E8%BD%89%E8%81%B7%E5%85%A8%E7%B4%80%E9%8C%84-%E4%B8%AD/"}],"tags":[{"name":"部落格","slug":"部落格","link":"/tags/%E9%83%A8%E8%90%BD%E6%A0%BC/"},{"name":"轉職","slug":"轉職","link":"/tags/%E8%BD%89%E8%81%B7/"}],"categories":[{"name":"主要","slug":"主要","link":"/categories/%E4%B8%BB%E8%A6%81/"},{"name":"轉職","slug":"轉職","link":"/categories/%E8%BD%89%E8%81%B7/"}],"pages":[]}